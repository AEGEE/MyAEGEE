input {
  tcp {
    port => 5000
    codec => json
  }
  udp {
    port => 5000
    codec => json
  }
  beats {
    port => 5044
    add_field => { "x_input_type" => "beat" }
  }
}

## Add your filters / logstash plugins configuration here
filter {

  # prune {
  #     whitelist_names => [ "timestamp", "msg", "message", "loglevel", "docker", "stream", "tags", "statuscode", "method", "type" ]
  # }

  ## From filebeat: traefik logs in nginx format
  if "traefik_log" in [tags] { #WORKS!!!
    #  mutate{ add_field => { "traefik_log_type" => "nginx_log" } }
    grok {
      match => { "message" => ["%{IPORHOST:[traefik][access][remote_ip]} - %{DATA:[traefik][access][user_name]} \[%{HTTPDATE:[traefik][access][time]}\] \"%{WORD:[traefik][access][method]} %{DATA:[traefik][access][url]} HTTP/%{NUMBER:[traefik][access][http_version]}\" %{NUMBER:[traefik][access][response_code]} %{NUMBER:[traefik][access][body_sent][bytes]} \"%{DATA:[traefik][access][referrer]}\" \"%{DATA:[traefik][access][agent]}\""] }
      remove_field => [ "message", "[traefik][access][time]" ]
    }
    useragent {
      source => "[traefik][access][agent]"
      target => "[traefik][access][user_agent]"
      remove_field => "[traefik][access][agent]"
    }
    geoip {
      source => "[traefik][access][remote_ip]"
      target => "[traefik][access][geoip]"
    }
    translate {
      field => "[traefik][access][response_code]"
      destination => "[traefik][access][x_http_response]"
      dictionary => {
        "200" => "200 OK"
        "201" => "201 Created"
        "403" => "403 Forbidden"
        "404" => "404 Not Found"
        "408" => "408 Request Timeout"
      }
    }
  }

  ## From filebeat: backup log
  if "backup_log" in [tags] { #WORKS!!!
    grok{
      match => { message => [
          "%{HTTPDATE:time} -- \[%{LOGLEVEL:loglevel}\] -- -- %{GREEDYDATA:msg}"
      ] }
    }
  }

  ## From logspout: (pre-made)containers' output
  if [docker][image] =~ "traefik" {
    kv { remove_field => [ "time", "message" ] }
    #   mutate{ add_field => { "traefik_log_type" => "traefik_log" } }
  }

  if [docker][image] =~ "logspout"{
    if "message" =~ /^#/ { #remove initial comments
        drop{}
    }
  }

  ## From applications: not logging requests to healthchecks or metrics.
  if [url] =~ "/healthcheck" or [url] =~ "/metrics" {
    drop {}
  }

  ## From logspout: nginx containers
  ## Taken from https://www.elastic.co/guide/en/logstash/current/logstash-config-for-filebeat-modules.html#parsing-nginx
  if [docker][image] =~ "nginx" or [docker][image] =~ "frontend" {
    grok {
      match => { "message" => ["%{IPORHOST:[nginx][access][remote_ip]} - %{DATA:[nginx][access][user_name]} \[%{HTTPDATE:[nginx][access][time]}\] \"%{WORD:[nginx][access][method]} %{DATA:[nginx][access][url]} HTTP/%{NUMBER:[nginx][access][http_version]}\" %{NUMBER:[nginx][access][response_code]} %{NUMBER:[nginx][access][body_sent][bytes]} \"%{DATA:[nginx][access][referrer]}\" \"%{DATA:[nginx][access][agent]}\""] }
      remove_field => "message"
    }
    mutate {
      add_field => { "read_timestamp" => "%{@timestamp}" }
    }
    date {
      match => [ "[nginx][access][time]", "dd/MMM/YYYY:H:m:s Z" ]
      remove_field => "[nginx][access][time]"
    }
    useragent {
      source => "[nginx][access][agent]"
      target => "[nginx][access][user_agent]"
      remove_field => "[nginx][access][agent]"
    }
    geoip {
      source => "[nginx][access][remote_ip]"
      # target => "[nginx][access][geoip]"
    }
  }

  if [docker][image] =~ "portainer"{
    dissect{
        mapping => { "message" => "%{} %{} %{msg}" }
        remove_field => "message"
    }
  }


  ## From logspout: our containers' output
  if [docker][image] =~ "core" {
    dissect{
      mapping => { "message" => "%{} %{loglevel} %{method} %{path} %{httpresponse} %{rtt} %{caller}" }
      remove_field => "message"
    }
  }
}

output {
  if "beat" in [tags] {
    elasticsearch {
      hosts => "elasticsearch:9200"
        # manage_template => false
      index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"  ###https://www.elastic.co/guide/en/logstash/current/plugins-inputs-beats.html
    }
  } else {
    elasticsearch {
      hosts => "${ELASTIC_INSTANCE}"
      user => "${ELASTIC_USER}"
      password => "${ELASTIC_PASSWORD}"
    }
  }
}
