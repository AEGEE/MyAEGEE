input {
	tcp {
		port => 5000
    codec => json
	}
	udp {
		port => 5000
    codec => json
	}
	beats {
		port => 5044
    add_field => { "x_input_type" => "beat" }
	}
}

## Add your filters / logstash plugins configuration here
filter {

  prune {
      whitelist_names => [ "timestamp", "msg", "message", "loglevel", "docker", "stream", "tags", "statuscode", "method", "type" ]
  }

## From filebeat: traefik logs in nginx format

  if "traefik_log" in [tags] { #WORKS!!!
    #  mutate{ add_field => { "traefik_log_type" => "nginx_log" } }
      grok {
        match => { "message" => ["%{IPORHOST:[traefik][access][remote_ip]} - %{DATA:[traefik][access][user_name]} \[%{HTTPDATE:[traefik][access][time]}\] \"%{WORD:[traefik][access][method]} %{DATA:[traefik][access][url]} HTTP/%{NUMBER:[traefik][access][http_version]}\" %{NUMBER:[traefik][access][response_code]} %{NUMBER:[traefik][access][body_sent][bytes]} \"%{DATA:[traefik][access][referrer]}\" \"%{DATA:[traefik][access][agent]}\""] }
        remove_field => [ "message", "[traefik][access][time]" ]
      }
      useragent {
        source => "[traefik][access][agent]"
        target => "[traefik][access][user_agent]"
        remove_field => "[traefik][access][agent]"
      }
      geoip {
        source => "[traefik][access][remote_ip]"
        target => "[traefik][access][geoip]"
      }
      translate {
        field => "[traefik][access][response_code]"
        destination => "[traefik][access][x_http_response]"
        dictionary => {
          "200" => "200 OK"
          "201" => "201 Created"
          "403" => "403 Forbidden"
          "404" => "404 Not Found"
          "408" => "408 Request Timeout"
        }
      }
    }

## From filebeat: backup log

#  if "backup_log" in [tags] { #WORKS!!!
#    grok{
#       match => { message => [
#           "%{HTTPDATE:time} -- \[%{LOGLEVEL:loglevel}\] -- -- %{GREEDYDATA:msg}"
#       ] }
#    }
#  }

## From logspout: containers output (pre-made)

  if [docker][image] =~ "traefik" {
        kv { remove_field => [ "time", "message" ] }
    #   mutate{ add_field => { "traefik_log_type" => "traefik_log" } }
  }

  if [docker][image] =~ "kibana"{
      grok {
        match => { "message" => "%{WORD:method} %{NOTSPACE:request} %{NUMBER:response_code} %{GREEDYDATA:kibana_stuff}" }
        remove_field => "message"
      }
  }

  if [docker][image] =~ "elasticsearch"{
#      grok { ##FAILING AT TIMES
#              match => [ "message", "\[%{TIMESTAMP_ISO8601:timestamp}\]\[%{DATA:loglevel}%{SPACE}\]\[%{DATA:source}%{SPACE}\]%{SPACE}\[%{DATA:node}\]%{SPACE}\[%{DATA:index}\] %{NOTSPACE} \[%{DATA:updated-type}\]",
#                        "message", "\[%{TIMESTAMP_ISO8601:timestamp}\]\[%{DATA:loglevel}%{SPACE}\]\[%{DATA:source}%{SPACE}\]%{SPACE}\[%{DATA:node}\] (\[%{NOTSPACE:Index}\]\[%{NUMBER:shards}\])?%{GREEDYDATA}"
#                       ]
#              remove_field => [ "message", "timestamp" ]
#      }
      grok {
              match => { "message" => ".*\[%{LOGLEVEL:loglevel}%{SPACE}\]\[%{DATA:component}\]%{SPACE}%{GREEDYDATA:msg}" }
              remove_field => [ "message", "component" ]
      }
#       dissect { #is dissect better(because simpler) than that grok? ->only until i don't care about ES cluster and shards
#          mapping => {
#               "message" => "%{timestamp} %{loglevel} %{} %{} %{} %{} %{msg}"
#          }
#          remove_field => [ "message", "timestamp" ]
#       }
  }

  if [docker][image] =~ "logstash"{
    grok {
      match => { "message" => ".*\[%{LOGLEVEL:loglevel}%{SPACE}\]\[%{DATA:component}\]%{SPACE}%{GREEDYDATA:msg}" }
      remove_field => ["message", "component"]
    }
  }


  if [docker][image] =~ "metricbeat"{
    grok{
        match => { "message" => ".*%{LOGLEVEL:loglevel}%{SPACE}%{DATA:goshit}/%{DATA:goshit}:%{INT:goshit}%{SPACE}%{GREEDYDATA:msg}" }
        remove_field => [ "message", "goshit" ]
    }
  }

  if [docker][image] =~ "filebeat"{
    grok{
        match => { "message" => ".*%{LOGLEVEL:loglevel}%{SPACE}%{DATA:goshit}/%{DATA:goshit}:%{INT:goshit}%{SPACE}%{GREEDYDATA:msg}" }
        remove_field => [ "message", "goshit" ]
    }
  }


  if [docker][image] =~ "logspout"{
    if "message" =~ /^#/ { #remove initial comments
        drop{}
    }
  }

  if [docker][image] =~ "portainer"{
    dissect{
        mapping => { "message" => "%{} %{} %{msg}" }
        remove_field => "message"
    }
  }


## From logspout: our containers' output
#todo: aggregate stuff from NPM


}

output {
    if "beat" in [tags] {
      elasticsearch {
        hosts => "elasticsearch:9200"
          # manage_template => false
        index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"  ###https://www.elastic.co/guide/en/logstash/current/plugins-inputs-beats.html
      }
    }else{
        elasticsearch {
          hosts => "${ELASTIC_INSTANCE}"
          user => "${ELASTIC_USER}"
          password => "${ELASTIC_PASSWORD}"
        }
	}
}
