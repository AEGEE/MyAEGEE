version: '3'

## TODO: set read only where needed, in volume sharing (as of now, it shadows docker-compose, but maybe more is needed)
## TODO: restart_policy
## TODO: HEALTHCHECK
#Swarm
# TODO: will we need flocker when we are swarm-ready?
# TODO: no depends_on in swarm mode???

services:

### OMS Tunnel        #######################################
### main container, dev version #######################################

    traefik:
        build:
            context: ./traefik
        ports:
            - "80:80"
            - "8080:8080"
            - "443:443"
        volumes:
          #this is necessary
            - /var/run/docker.sock:/var/run/docker.sock
          #this is optional, for live modifications 
            - ./traefik/traefik.toml:/etc/traefik/traefik.toml

    omsserviceregistry:
        build:
            context: ./omsserviceregistry
        ports:
            - "7000:7000"
        volumes:
            - shared:/usr/src/shared
            - strapstate:/usr/scripts/strapstate:ro
            - code-serviceregistry:/usr/src/app
        depends_on:
            - "mongodb"
#        networks:
#            - "backend"

### OMS CORE        #######################################
### Workspace Utilities Container ###########################

    omscore:
        build:
            context: ./omscore
        volumes:
            - shared:/var/shared
            - strapstate:/var/strapstate
            - code-core:/var/www
        depends_on:
            - "postgres"
#        networks:
#            - "backend"

### PHP-FPM Container #######################################

    php-fpm: #necessary ? or in the image is already there since these people put ALL the shit in their dockerfiles?
        build:
            context: ./php-fpm
        volumes:
            - shared:/var/shared
            - code-core:/var/www
        expose:
            - "9000"
        depends_on:
            - "omscore-bootstrap"
    #        networks:
    #            - "backend"

### Nginx Server Container ##################################

    omscore-nginx:
        build:
            context: ./omscore-nginx
        volumes:
            - logs:/var/log/nginx
            - shared:/var/shared
            - strapstate:/var/strapstate ####
            - code-core:/var/www
        expose:
            - "80"
        depends_on:
            - "php-fpm"
        labels:
            - "traefik.backend=omscore"
            - "traefik.port=80"
            - "traefik.frontend.rule=Host:appserver"
            - "traefik.frontend.priority=10"
            - "traefik.enable=true"
            - "registry.categories=(users, 10);(antennae, 10);(notifications, 0)"
            - "registry.backend=/api"
            - "registry.description=The core module with both backend and frontend"
#        networks:
#            - "backend"


### Bootstrapper ##################################

    omscore-bootstrap:
        build:
            context: ./omscore
        volumes:
            - shared:/var/shared
            - strapstate:/var/strapstate
            - code-core:/var/www
        depends_on:
            - "omscore" 
        command: sh /var/shared/core/bootstrap.sh

### PostgreSQL Container ####################################

    postgres:
        build: ./postgres
        volumes:
            - postgres:/var/lib/postgresql/data
        expose:
            - "5432"
        environment:
            POSTGRES_DB: homestead
            POSTGRES_USER: homestead
            POSTGRES_PASSWORD: secret
#        networks:
#            - "backend"

### pgAdmin Container #######################################

    pgadmin:
        build: ./pgadmin
        ports:
            - "5050:5050"
        depends_on:
            - "postgres"
#        networks:
#            - "backend"    

### OMS EVENTS        #######################################
### mongodb Container #######################################

    mongodb:
        build: ./mongo
        ports:
            - "27017:27017"
        volumes:
            - mongodb:/data/db
#        networks:
#            - "backend"

### mongoui Container #######################################

    mongoui:
        build: ./mongoui
        ports:
            - "3000:3000"
        depends_on:
            - "mongodb"
#        networks:
#            - "backend"

### Omsevents backend #######################################

    omsevents:
        build:
            context: ./omsevents
        volumes:
            - omsevents_media:/usr/app/media
            - code-events:/usr/app/oms-events
            - shared:/usr/shared:ro
            - strapstate:/usr/scripts/strapstate
        depends_on:
            - "mongodb"
            - "omscore-bootstrap"
        labels:
            - "traefik.backend=omsevents"
            - "traefik.port=8082"
            - "traefik.frontend.rule=Host:appserver;PathPrefix:/services/omsevents/api;PathPrefixStrip:/services/omsevents/api"
            - "traefik.frontend.priority=110"
            - "traefik.enable=true"
            - "registry.categories=(events, 10);(notifications, 10)"
            - "registry.servicename=omsevents"


### Omsevents frontend #######################################

    omsevents-frontend:
        build:
            context: ./omsevents-frontend
        volumes:
            - "code-events-frontend:/usr/app/frontend:ro"
            - omsevents_media:/usr/app/media
            - logs-events:/var/log/nginx
        depends_on:
            - omsevents
        labels:
            - "traefik.frontend.rule=Host:appserver;PathPrefix:/services/omsevents;PathPrefixStrip:/services/omsevents"
            - "traefik.frontend.priority=100"
            - "traefik.port=8083"
            - "traefik.backend=omsevents-frontend"
            - "traefik.enable=true"
            - "registry.modules=/frontend/getModules.json"    

### Bootstrapper frontend #######################################

    omsevents-bootstrap:
        build:
            context: ./omsevents
        volumes:
            - omsevents_media:/usr/app/media
            - code-events:/usr/app/oms-events
            - shared:/usr/shared:ro
            - strapstate:/usr/scripts/strapstate
        depends_on:
            - "omsevents" 
        command: bash /usr/scripts/start.sh 


### OMS APPLICATIONS           #######################################
### Applications to oms-events #######################################

    omsapplications:
        build:
            context: ./omsapplications
        volumes:
            - "code-applications:/usr/app"
            - shared:/usr/shared:ro
        depends_on:
            - mongodb
        labels:
            - "traefik.backend=omsapplications"
            - "traefik.port=8085"
            - "traefik.frontend.rule=Host:appserver;PathPrefix:/services/omsapplications/api;PathPrefixStrip:/services/omsapplications/api"
            - "traefik.frontend.priority=110"
            - "traefik.enable=true"
            - "registry.categories=(applications, 10);(events_frontend, 10)"
            - "registry.servicename=omsapplications"

### Applications frontend #######################################

    omsapplications-frontend:
        build:
            context: ./omsapplications-frontend
        volumes:
            - "code-applications-frontend:/usr/app/frontend:ro"
            - "./omsapplications-frontend/sites/omsapplications.conf:/etc/nginx/sites-available/omsapplications.conf:ro"
        depends_on:
            - omsapplications
        labels:
            - "traefik.frontend.rule=Host:appserver;PathPrefix:/services/omsapplications;PathPrefixStrip:/services/omsapplications"
            - "traefik.frontend.priority=100"
            - "traefik.port=8086"
            - "traefik.backend=omsapplications-frontend"
            - "traefik.enable=true"
            - "registry.modules=/getModules.json"

### Volumes Setup ###########################################

volumes:
    #Databases/logs
    postgres:
        driver: "local"
    mongodb:
        driver: "local"
    logs:
        driver: "local"
    logs-events:
        driver: "local"
    #Shared stuff
    omsevents_media:
        driver: "local"
    shared:
        driver: "local"
    strapstate: # TODO integrate within shared
        driver: "local"
    #Code
    code-core:
#        driver: "local" #uncomment for non-dev and comment the below
        driver_opts:
              type: none
              device: /home/vagrant/oms-docker/oms-core/ #NOTE needs abs path
              o: bind
    code-events: 
#        driver: "local"
        driver_opts:
              type: none
              device: /home/vagrant/oms-docker/oms-events/ #NOTE needs full path
              o: bind
    code-events-frontend:
#        driver: "local"
        driver_opts:
              type: none
              device: /home/vagrant/oms-docker/oms-events-frontend/ #NOTE needs full path
              o: bind
    code-serviceregistry:
#        driver: "local"
        driver_opts:
              type: none
              device: /home/vagrant/oms-docker/oms-serviceregistry/ #NOTE needs full path
              o: bind
    code-applications: 
#        driver: "local"
        driver_opts:
              type: none
              device: /home/vagrant/oms-docker/oms-applications/ #NOTE needs full path
              o: bind
    code-applications-frontend:
#        driver: "local"
        driver_opts:
              type: none
              device: /home/vagrant/oms-docker/oms-applications-frontend/ #NOTE needs full path
              o: bind

### Networks Setup ###########################################
        
networks:
    devel:
        driver: bridge
        ipam:
          driver: default
    backend:
        driver: bridge
        ipam:
          driver: default
